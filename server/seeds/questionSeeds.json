[
  {
    "name": "Odd or Even",
    "question": "Write code to return the string \"odd\" if number is an odd number and return the string \"even\" if number is an even number. Use the number 74 to solve the problem.",
    "answer": "even",
    "hint": "Use a conditional statement to see if the number is even or odd.",
    "solution": "var oddOrEven = function(num) { \n    if (num%2===0){ \n        console.log(\"even\") \n    } \n    else{ \n        console.log(\"odd\") \n    } \n };\n oddOrEven(74)",
    "comment":"var oddOrEven = function(num) { \n };\n oddOrEven(74)",
    "difficulty_id": 1,
    "language_id": 2
  },
  {
    "name": "Palindrome",
    "question": "Write code that returns true if string is a palindrome, and false if string is not a palindrome. Use the word \"Palindrome\" to test.",
    "answer": "false",
    "hint": "Can create an array to reverse all of the letters in the world and then join them together to create string.",
    "solution": "var isPalindrome = function(str) { \n const str1= str.toLowerCase() \n const newArray= Array.from(str1).reverse().join(\"\")\n  return (str1===newArray)\n };\n console.log(isPalindrome('Palindrome'))",
    "comment":"var isPalindrome = function(str) { \n };\n console.log(isPalindrome('Palindrome'))",
    "difficulty_id": 1,
    "language_id": 2
  },
  {
    "name": "CountDown",
    "question": "Write code to print all numbers from the number down to zero and save in an array.",
    "answer": "[6,5,4,3,2,1,0]",
    "hint": "Use a for loop with decrement to reverse through the numbers.",
    "solution": "let count =[]\nvar countdown = function(num) {\nfor(let i=num; i>=0; i--){\ncount.push(i)\n}\nreturn count\n};\n console.log(countdown(6))",
    "comment":"var countdown = function(num) {};\n console.log(countdown(6))",
    "difficulty_id": 1,
    "language_id": 2
  },
  { 
    "name": "Array Addition",
    "question": "Write code to add all the numbers in the array below and return the total.",
    "answer": "25",
    "hint": "Can use a loop to add all of the numbers in an array. Another was is to use the reducer function",
    "comment": "//Use the array given to solve the problem \n const array=[1,2,3,4,5,5,5] ",
    "solution": "const array =[1,2,3,4,5,5,5] \n var sumArray = function(total, currentValue) { \n return total + currentValue \n}; \n console.log(array.reduce(sumArray))",
    "difficulty_id": 1,
    "language_id": 2
   },
   {
    "name": "Factorial",
    "question": "Write code to create a function that returns the factorial of the number. Use the number 5 to answer the question.",
    "answer": "120",
    "hint": "Factorial: product of all positive integers less than or equal to a given positive integer.",
    "solution": "var factorial = function(num) { \n   var count=1 \n   for (let i=1; i<num+1; i++){ \n    count = count * i \n  } \n   return count \n }; \n \n console.log(factorial(5));",
    "difficulty_id": 1,
    "language_id": 2
   },
   {  
    "name": "TitleCase",
    "question": "Write code to create a function takes a string and returns a new string with the first letters of each word capitalized. Use the phrase \"how is your day going\" to solve the problem.",
    "answer": "How Is Your Day Going",
    "hint": "Loop through string and capitalize the first letter of each word. Methods that can use to complete the challenge. The substr() method extracts part of a string. The join() method returns and array as a string.",
    "solution": "var titleCase = function(str) { \n   const trial=str.split(' ') \n   const loopT = trial.map(s=> s[0].toUpperCase()+ s.substr(1)).join(\" \") \n return loopT \n }; console.log(titleCase(\"how is your day going\"))",
    "difficulty_id": 2,
    "language_id": 2
   },
   { 
    "name": "Product of 2 Largest",
    "question": "Write code to create a function that accepts an array of numbers, finds the largest two numbers, and returns the product of the two.",
    "answer": "60",
    "hint": "Find the largest number in an array. Then remove the largest number and grab the next highest number. ",
    "comment": "//Use the array given to solve the problem \n const array = [2,6,5, 40,8,3,4,2, 20]",
    "solution": "const array = [2,6,5, 40,8,3,4,2, 20] \n var productOfLargestTwo = function(arr) { \n   const largest = Math.max(...arr) \n   arr.splice(arr.indexOf(largest),1) \n   const second = Math.max(...arr) \n return largest + second \n }; \n \n console.log(productOfLargestTwo(array))",
    "difficulty_id": 2,
    "language_id": 2
   },
   { 
    "name": "Anagram",
    "question": "Write code to create a function that accepts two strings. Return true if the strings are anagrams of each other, otherwise return false. Use the words battle and tablet to test the function.",
    "answer": "true",
    "hint": "An anagram is a word or phrase by rearranging the letters of another word. Create arrays of the characters and sort to determine if the all of the characters are the same.",
    "comment": " const strA=\"battle\" \n  const strB=\"tablet\" ",
    "solution": "var isAnagram = function(strA, strB) { \n    const loweredA= strA.toLowerCase() \n    const loweredB= strB.toLowerCase() \n   const arrayA= Array.from(loweredA).sort() \n    const arrayB= Array.from(loweredB).sort() \n    const newA = arrayA.join() \n    const newB= arrayB.join() \n   return newA===newB \n }; \n \n const strA=\"battle\" \n const strB=\"tablet\" \n console.log(isAnagram(strA, strB))",
    "difficulty_id": 2,
    "language_id": 2
   },
   { 
    "name": "Create a Person",
    "question": "Write a JavaScript program to create a class called Person with properties for name, age, and country. Include a method to display the persons details. Use the following criteria and return in this format- Name: Trevor, Age: 25, and Country: France.",
    "answer": " Name: Trevor Age: 25 Country: France",
    "hint": "First create a constructor for a Person object. Then create a method to log the name, age, and properties for the person. Lastly create an instance of a Person with the given criteria.",
    "solution": "class Person { \n   constructor(name, age, country) { \n     this.name = name; \n     this.age = age; \n     this.country = country; \n   } \n \n   displayDetails() { \n     console.log(`Name: ${this.name}`); \n     console.log(`Age: ${this.age}`); \n     console.log(`Country: ${this.country}`); \n   } \n } \n  const person1 = new Person('Trevor', 25, 'France'); \n person1.displayDetails();",
    "difficulty_id": 2,
    "language_id": 2
   },
   {
    "name": "Percentile",
    "question": " Write a JavaScript program to calculate how many numbers in the given array are less than or equal to the value 3 in the given array below.",
    "answer": "50",
    "hint": "Use the filter for arrays in order to see if the numbers in the array are less than or greater than the given value.",
    "comment": "//Use the array given to find the percentile of number 3 \n const array = [1, 2, 3, 4, 5, 6]",
    "solution": "const percentile = (arr, num) => ( \n arr.filter((item) => item <= num).length / arr.length) * 100; \nconsole.log(percentile([1, 2, 3, 4, 5, 6],3))",
    "difficulty_id": 2,
    "language_id": 2
   },
   { 
    "name": "Division",
    "question": "Write a Java program to take 2 numbers, divide them, and return the answer rounded to the hundredths position. Use 1025 as the numerator and 6 as the denominator.",
    "answer": "170.83",
    "hint": "Divide the two inputs and save in a new variable. Then format the answer to the hundredths position.",
    "comment":"//Numerator: 1025 & Denominator:6",
    "solution": "public class Main { \n public static void main(String[] args) { \n float result = (float)1025 / 6; \n System.out.format(\"%.2f\", result); \n }\n } ",
    "difficulty_id": 1,
    "language_id": 1
   },
   {
    "name": "Calculate Interest",
    "question": "Find the simple interest for a $10,000 amount at the rate of 5% for 5 years.",
    "answer": "2500",
    "hint": "Simple Interest is calculated: (Amount x Time x Rate)/100",
    "solution": "class Main { \n public static void main(String args[]) \n { \n int P = 10000, R = 5, T = 5; \n \n int SI = (P * T * R) / 100; \n System.out.println(SI); \n }\n }",
    "difficulty_id": 1,
    "language_id": 1
   },
   { 
    "name": "Vowel Search",
    "question": "Create a Java program to see if the string \"Hello\" contains vowels.",
    "answer": "true",
    "hint": "Use regular expression: https://www.w3schools.com/java/java_regex.asp",
    "solution": "public class Main { \n public static void main(String[] args) { \n System.out.println(stringContainsVowels(\"Hello\")); \n } \n \n public static boolean stringContainsVowels(String input) { \n return input.toLowerCase().matches(\".*[aeiou].*\"); \n } \n }",
    "difficulty_id": 1,
    "language_id": 1
   },
   {
    "name": "Prime Number",
    "question": "Write a Java program to determine if the number is prime. Return true if it is and false if it is not. Use number 49 to test the program.",
    "answer": "false",
    "hint": "A prime number are numbers greater than 1 with exactly two factors, 1 and the number itself",
    "solution": "public class Main { \n public static void main(String[] args) { \n System.out.println(isPrime(49)); \n } \n \n public static boolean isPrime(int n) { \n if (n == 0 || n == 1) { \n return false; \n } \n if (n == 2) { \n return true; \n } \n for (int i = 2; i <= n / 2; i++) { \n if (n % i == 0) { \n return false; \n } \n } \n return true; \n } \n }",
    "difficulty_id": 1,
    "language_id": 1
   },
   { 
    "name": "Array Sum",
    "question": "Add all of the numbers in the array below and return them in a variable.",
    "answer": "46",
    "hint": "Create a loop in order to add all of the integers.",
    "comment": " int[] array = { 7, 2, 24, 4, 9 }; ",
    "solution": "public class Main { \n  public static void main(String[] args) { \n  int[] array = { 7, 2, 24, 4, 9 }; \n \n int sum = 0; \n \n for (int i : array) \n   sum += i; \n \n System.out.println(sum); \n   }\n }",
    "difficulty_id": 1,
    "language_id": 1
   },
   {
    "name": "Negative List",
    "question": "Given a list of numbers, write a Python program to print all negative numbers in the given list.",
    "answer": "-21 -93 ",
    "hint": "Loop through the array checking to see if each number meets the condition of being less than zero.",
     "comment": "numList=[11, -21, 0, 45, 66, -93]",
    "solution": "list1 = [11, -21, 0, 45, 66, -93]\nfor num in list1:\n    if num < 0:\n      print(num)",
    "difficulty_id": 1,
    "language_id": 3
},
{
    "name": "Swap Commas",
    "question": "Replace all the commas with periods and all the periods with commas for the string below.",
    "answer": " 14.625.498, 002",
    "hint": "On possible solution is to use maketrans and translate methods. Another method is to use the replace to change characters in the string.",
    "comment": "string = \"14, 625, 498.002\"",
    "solution": "def Replace(str1):\n    maketrans = str1.maketrans\n    final = str1.translate(maketrans(',.', '.,', ' '))\n    return final.replace(',', \", \")\n\nstring = \"14, 625, 498.002\"\nprint(Replace(string))",
    "difficulty_id": 1,
    "language_id": 3
},
{
    "name": "Sorting Dictionary",
    "question": "Write a program that takes the provided dictionary and sorts it according to the keys.",
    "answer": "{'Bob': 2, 'Collin': 9, 'Kyle': 32, 'Sarah': 15, 'Zoey': 10}",
    "hint": "Create a list of all the keys and then sort the list. Create a new dictionary by iterating over an iterable and specifying how to map keys to values",
    "comment": "myDict = {'Zoey': 10, 'Collin': 9,'Sarah': 15, 'Bob': 2, 'Kyle': 32}",
    "solution": "myDict = {'Zoey': 10, 'Collin': 9,'Sarah': 15, 'Bob': 2, 'Kyle': 32}\n\nmyKeys = list(myDict.keys())\nmyKeys.sort()\nsorted_dict = {i: myDict[i] for i in myKeys}\n\nprint(sorted_dict)",
    "difficulty_id": 1,
    "language_id": 3
},
{
    "name": "Dictionary Sum",
    "question": "Write a program that takes the provided dictionary returns the sum of all the values to help the \"Normal Store\" figure out how much inventory they have.",
    "answer": "600",
    "hint": "Loop through the dictionary and append all of the values to a list. Return the sum of the list to find the inventory for the store. ",
    "comment": "myDict = {'Shirts': 100, 'Socks': 200, 'Hats': 300}",
    "solution": "def returnSum(myDict):\n  list = []\n  for i in myDict:\n      list.append(myDict[i])\n  final = sum(list)\n\n  return final\n\nmyDict = {'Shirts': 100, 'Socks': 200, 'Hats': 300}\nprint(returnSum(myDict))",
    "difficulty_id": 1,
    "language_id": 3
},
{
    "name": "Extract Strings",
    "question": "Given the string and with HTML tags, extract all of the strings in the specific tag.",
    "answer": "['Python', 'great']",
    "hint": "Use the re module (RegeEx) in order to extract the strings between all the p tags.",
    "comment": "# importing re module\n import re\ntest_str = '<p>Python</p><span>is</span><p>great</p>'\ntag = \"p\"",
    "solution": "import re\ntest_str = '<p>Python</p><span>is</span><p>great</p>'\ntag = \"p\"\nreg_str = \"<\" + tag + \">(.*?)</\" + tag + \">\"\nres = re.findall(reg_str, test_str)\n\nprint(str(res))",
    "difficulty_id": 1,
    "language_id": 3
},
{
  "name": "Conditional Calculation ",
  "question": "Given two integer numbers, return their product only if the product is equal to or lower than 1000. Otherwise, return their sum. Call the function twice: once using 20 & 30, the second time using 40 & 30",
  "answer": "600 70",
  "hint": "Use a conditional statement to see if the product is over 1000. If under return the product if greater than 1000 return the sum",
  "comment": "# Set 1: 20 & 30 \n# Set 2: 40 &30",
  "solution": "def multiplication_or_sum(num1, num2):\n  product = num1 * num2\n  if product <= 1000:\n     return product\n  else:\n    return num1 + num2\n\nresult = multiplication_or_sum(20, 30)\nprint(result)\n\nresult = multiplication_or_sum(40, 30)\nprint(result)",
  "difficulty_id": 2,
  "language_id": 3
},
{
  "name": "Number Palindrome ",
  "question": "Write a program to check if the given number is a palindrome number. A palindrome number is a number that is the same after reversing the order. If it is a palindrome return True and if not return False. Check the numbers 121 and 125.",
  "answer": "True False",
  "Comment": "#Check number 121 \n #Check number 125",
  "hint": "Reverse the given string and save it in a different variable to compare with the original.",
  "solution": "def palindrome(number):\n  original_num = number\n\n  reverse_num = 0\n  while number > 0:\n    reminder = number % 10\n    reverse_num = (reverse_num * 10) + reminder\n    number = number // 10\n\n  if original_num == reverse_num:\n    print(True)\n  else:\n    print(False)\n\npalindrome(121)\npalindrome(125)",
  "difficulty_id": 2,
  "language_id": 3
},
{
  "name": "Merge List",
  "question": "Create a list from 2 given lists using the following condition: the new list should contain odd numbers from the first list and even numbers from the second list.",
  "answer": " [25, 35, 40, 60, 90]",
  "comment": "#Use the following lists to solve the question \n # list1 = [10, 20, 25, 30, 35] \n # list2 = [40, 45, 60, 75, 90]",
  "hint": " Loop through the list to check for the given condition. If meets the condition add to the return array.",
  "solution": "def merge_list(list1, list2):\n    result_list = []\n\n    for num in list1:\n      if num % 2 != 0:\n        result_list.append(num)\n\n    for num in list2:\n      if num % 2 == 0:\n        result_list.append(num)\n    return result_list\n\nlist1 = [10, 20, 25, 30, 35]\nlist2 = [40, 45, 60, 75, 90]\nprint(merge_list(list1, list2))",
  "difficulty_id": 2,
  "language_id": 3
},
{
  "name": "Permutations",
  "question": "Write a python program that generates all possible strings from a given set of letters.",
  "answer": "['abc', 'acb', 'bac', 'bca', 'cab', 'cba']",
  "comment": "letters = \"abc\"",
  "hint": "Determine the length of the string and then create a loop in order to find all the permutations of the given letters.",
  "solution": "def generate_permutations_naive(data):\n  if len(data) == 0:\n    return ['']\n  permutations = []\n  for i in range(len(data)):\n    remaining = data[:i] + data[i+1:]\n    for perm in generate_permutations_naive(remaining):\n        permutations.append(data[i] + perm)\n  return permutations\n\nletters = \"abc\"\nall_permutations = generate_permutations_naive(letters)\nprint(all_permutations)",
  "difficulty_id": 2,
  "language_id": 3
},
{
  "name": "Dictionary Iteration",
  "question": "From a dictionary, print only the items with an odd value of less than 45. Return the key and value of the pairs that match.",
  "answer": "Amy 31 Penny 5",
  "comment": "dic={'Sheldon': 45, 'Amy': 31, 'Raj':312, 'Leonard': 400, 'Penny':5, 'Howard':47}",
  "hint": "Run a loop over all the key-value pairs of the dictonary. Then check if the value is odd and less than 45.",
  "solution": "dic={'Sheldon': 45, 'Amy': 31, 'Raj':312, 'Leonard': 400, 'Penny':5, 'Howard':47}\nfor i,j in dic.items():\n  if (j%2!=0) and (j<45):\n    print(i, j)",
  "difficulty_id": 2,
  "language_id": 3
},
{
  "name": "2nd Largest Number",
  "question": "For the given array below find the second largest number.",
  "answer": "77",
  "hint": "You can use the Arrays.sort() method to sort the array and then return the second-to-last element. To use the Arrays.sort() method make sure to import java.util.Arrays .",
  "comment": "//int[] second = {44, 66, 99, 77, 33, 22, 55};",
  "solution": "import java.util.Arrays;\n\npublic class Main {\n    public static int getSecondLargest(int[] a, int total) {\n        Arrays.sort(a);\n        return a[total - 2];\n    }\n\n    public static void main(String[] args) {\n        int[] second = {44, 66, 99, 77, 33, 22, 55};\n        System.out.println(getSecondLargest(second, 7));\n    }\n}",
  "difficulty_id": 2,
  "language_id": 1
},
{
  "name": "Counting Characters",
  "question": "Extract and count the amount of each character in a string and return it as an HashMap.",
  "answer": "{a=2, A=1, b=2, B=1, c=2, C=1, d=2, D=1}",
  "hint": "Create a HashMap to store the data. Loop thorough the characters in the string. If the character exists add 1 to the existing number, if the character doesn’t exist add it with count of 1.",
 "comment": "//Check the following string \n String str = \"abcdABCDabcd\";",
  "solution": "import java.util.*;\nclass Main {\n  static void getOccurringChar(String str){\n    char[] chars = str.toCharArray();\n    Map<Character, Integer> charsCount = new HashMap<>();\n  for (char c : chars) {\n    if (charsCount.containsKey(c)) {\n      charsCount.put(c, charsCount.get(c) + 1);\n    } else\n      charsCount.put(c, 1);\n  }\n  System.out.println(charsCount); \n  } \n\n  public static void main(String[] args){\n    String str = \"abcdABCDabcd\";\n    getOccurringChar(str);\n  }\n}",
  "difficulty_id": 2,
  "language_id": 1
},
{
  "name": "Remove Word",
  "question": "Given the string below write a program in order to remove the given word.",
  "answer": "CodeIT is the best website",
  "hint": "You can use the replaceAll method in order to remove the given word.",
  "comment": "String str = \"CodeIT is the best worst website\";\nString word = \"worst\";",
  "solution": "import java.io.*;\n\nclass Main {\n    public static void main(String[] args){\n      String str = \"CodeIT is the best worst website\";\n      String word = \"worst\";\n      str = str.replaceAll(\"worst \", \"\");\n      str = str.trim();\n      System.out.print(str);\n    }\n}",
  "difficulty_id": 2,
  "language_id": 1
},
{
  "name": "Nth Fibonacci",
  "question": "Write a program to find the nth Fibonacci number.",
  "answer": "55",
  "hint": "The Fibonacci sequence is a sequence in which each number is the sum of the two preceding ones. Create an array of size n+1 to store Fibonacci numbers. Initialize the first 2 Fibonacci numbers 0 and 1. Then create a loop that sums the two preceding numbers and stores it in the array.",
  "comment": "//Use the below int as the nth Fibonacci number\nint n = 10;",
  "solution": "public class Main {\n  public static void main(String[] args) {\n      int n = 10;\n      int[] dp = new int[n + 1];\n      dp[0] = 0;\n      dp[1] = 1;\n      for (int i = 2; i <= n; i++) {\n          dp[i] = dp[i - 1] + dp[i - 2];\n      }\n      System.out.println(dp[n]);\n  }\n}",
  "difficulty_id": 2,
  "language_id": 1
},
{
  "name": "Recursive Linear Search",
  "question": "Given an array of elements white a function to recursively search a given element in the array. Return the number being searched and the index. ",
  "answer": "1",
  "hint": " Linear search algorithm is defined as a sequential search algorithm that starts at one end and goes through each element of a list until the desired element is found; otherwise, the search continues till the end of the dataset.",
  "comment": "int x = 60;\n int arr[] = new int[] { 25, 60, 18, 3, 10 };",
  "solution": "public class Main {\n\n    static int recursiveSearch(int arr[], int l, int r, int x){\n        if (r < l)\n            return -1;\n        if (arr[l] == x)\n            return l;\n        if (arr[r] == x)\n            return r;\n        return recursiveSearch(arr, l + 1, r - 1, x);\n    }\n\n    public static void main(String[] args){\n        int x = 60;\n        int arr[] = new int[] { 25, 60, 18, 3, 10 };\n        int index\n            = recursiveSearch(arr, 0, arr.length - 1, x);\n        if (index != -1)\n        System.out.println(index);\n\n        else\n          System.out.println(x + \"is not present\");\n    }\n}",
  "difficulty_id": 3,
  "language_id": 1
},
{
  "name": "Make Change",
  "question": "Write a program to find the minimum number of coins needed to make change for the given amount below.",
  "answer": "4",
  "hint": "Define an array with the coin denominations. Create another array of size amount + 1 to store the minmium number of coins needed. Loop through each amount from 0-76 and each coin demonination.If the current amount is greater than or equal to the coin value, update the minimum number of coins.",
  "comment": "int amount = 76;",
  "solution": "import java.util.Arrays;\n\npublic class Main {\n  public static void main(String[] args) {\n      int[] coins = {1, 5, 10, 25};\n      int amount = 76;\n      int[] dp = new int[amount + 1];\n      Arrays.fill(dp, Integer.MAX_VALUE);\n      dp[0] = 0;\n      for (int i = 1; i <= amount; i++) {\n          for (int j = 0; j < coins.length; j++) {\n              if (i >= coins[j]) {\n                  dp[i] = Math.min(dp[i], dp[i - coins[j]] + 1);\n              }\n          }\n      }\n      System.out.println(dp[amount]);\n  }\n}",
  "difficulty_id": 2,
  "language_id": 1
},
{
  "name": "Resistor Color",
  "question": "Resistors have a resistance value. To figure out the resistance value of resistor color coded bands are printed on them. Create a program that figures out what the resistance value of a band is based on the color. Then find the index of the color grey.",
  "answer": "8",
  "hint": "Create an array with all of the colors in order according to their encoded value. Then create a function that accepts a string and find the indexOf the color provided. ",
  "comment": "// Encoded Colors: black:0, brown:1, red:2, orange:3, yellow:4, green:5, blue:6, violet:7, grey:8, white:9.",
  "solution": "export const colorCode = (color: string) => {\n  return COLORS.indexOf(color)\n}\nexport const COLORS = [\n      'black',\n      'brown',\n      'red',\n      'orange',\n      'yellow',\n      'green',\n      'blue',\n      'violet',\n      'grey',\n      'white',\n]\nconsole.log(colorCode(\"grey\"));",
  "difficulty_id": 1,
  "language_id": 4
},
{
  "name": "Leap Year",
  "question": "A Leap year occurs when the year is evenly divisible by 4. Exception is if the year is evenly divisible by 100, then it’s only a leap year if the year is also evenly divisible by 400. Write a program that determines if the given year is a leap year and returns a Boolean. Test is with the years: 1997, 1990, 2000.",
  "answer": "false false true",
  "hint": "Write a function that accepts a number and returns a Boolean determined by using logical operators.",
  "comment": "// Check the years 1997, 1990, and 2000",
  "solution": "export function isLeap(year: number): boolean {\n    return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0)\n}\nconsole.log(isLeap(1997))\nconsole.log(isLeap(1990))\nconsole.log(isLeap(2000))",
  "difficulty_id": 1,
  "language_id": 4
},
{
  "name": "Target Darts",
  "question": "Write a function that returns the earned points in a single toss of a darts game. There will be 4 different point possibilities: outside the target:0, outer circle: 1pt. r:10 units, middle circle:5pt. r: 5 units, and inner circle: 10pt. r:1 unit. Write a function that given point (x,y) on target returns the correct amount of points.",
  "answer": "5",
  "hint": "Calculate the Euclidean distance. Then use conditional statements to return the point total based on the which category the distance falls into.",
  "comment": "//Find the score for coordinates x:1, y:2",
  "solution": "export function score(x: number, y: number): number {\n  const distance = Math.sqrt(x ** 2 + y ** 2)\n  if (distance <= 1) {\n    return 10\n  } else if (distance <= 5) {\n    return 5\n  } else if (distance <= 10) {\n    return 1\n  } else {\n    return 0\n  }\n}\nconsole.log(score(1,2))",
  "difficulty_id": 1,
  "language_id": 4
},
{ 
  "name": "Default User",
  "question": "Using the defaultUser information below create a User interface and Post interface. Then console.log the defaultUser information.",
  "answer": "{  id: 1,  firstName: 'Emmet',  lastName: 'Brickowski',  role: 'admin',  posts: [    { id: 1, title: 'Where are my pants?' },    { id: 2, title: 'Everything is awesome!' }  ]}",
  "hint": "Create a User interface first with all of the variables found below. Posts should be an array of posts. Then create a Post interface with the post variables. ",
  "comment": "export const defaultUser: User = {\n  id: 1,\n  firstName: \"Emmet\",\n  lastName: \"Brickowski\",\n  role: \"admin\",\n  posts: [\n    {\n      id: 1,\n      title: \"Where are my pants?\",\n    },\n    {\n      id: 2,\n      title: \"Everything is awesome!\",\n    },\n  ],\n};\nconsole.log(defaultUser)",
  "solution": "interface User {\n  id: number;\n  firstName: string;\n  lastName: string;\n  role: \"admin\" | \"user\" | \"super-admin\";\n  posts: Array<Post>;\n}\ninterface Post {\n  id: number;\n  title: string;\n}\n\nexport const defaultUser: User = {\n  id: 1,\n  firstName: \"Emmet\",\n  lastName: \"Brickowski\",\n  role: \"admin\",\n  posts: [\n    {\n      id: 1,\n      title: \"Where are my pants?\",\n    },\n    {\n      id: 2,\n      title: \"Everything is awesome!\",\n    },\n  ],\n};\nconsole.log(defaultUser)",
  "difficulty_id": 1,
  "language_id": 4
  },
  {
    "name": "Friday 13th Detector",
    "question": "Using Python create a program to detect all Fridays with a day of 13 in the years 2020-2024. Return them in the format yyyy dd mm.",
    "answer": "2020 3 13 2020 11 13 2021 8 13 2022 5 13 2023 1 13 2023 10 13 2024 9 13 2024 12 13",
    "hint": "Create a loop that iterates through the specified years. Check if the day is a Friday and also if the date is the 13th.",
    "comment": "#Use the following format to return all of the Friday 13th \nprint(f\"{d.month} {d.day} {y}\")",
    "solution": "from datetime import date, timedelta\n\ndef friday_13_in_year(y):\n    day = date(y, 1, 1)\n    end = date(y, 12, 31)\n    one_day = timedelta(days=1)\n    while day <= end:\n        if day.weekday() == 4 and day.day == 13:\n            yield day\n        day += one_day\n\nfor y in range(2020, 2025):\n    for d in friday_13_in_year(y):\n        print(f\"{y} {d.month} {d.day}\")",
    "difficulty_id": 3,
    "language_id": 3
},
{
  "name": "Binary Search",
  "question": "Binary search is a more efficient searching algorithm suitable for sorted lists. It repeatedly divides the search interval in half until the target value is found. Use the array found below and find the index of the integer 40.",
  "answer": "4",
  "hint": "Start with the list sorted. Find the middle element of the list. If the middle element is equal to the target value, return its index. If the middle element is less than the target value, search in the right half of the list. If less than the middle element, search the left half of the list. Repeat steps 2-5 until the target value is found or the search interval is empty.",
  "comment": "arr = [2, 3, 4, 10, 40, 46, 53, 54, 67, 83, 101]\ntarget = 40",
  "solution": "def binary_search(arr, target, low, high):\n    if low <= high:\n        mid = (low + high)\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            return binary_search(arr, target, mid + 1, high)\n        else:\n            return binary_search(arr, target, low, mid - 1)\n    else:\n        return -1\narr = [2, 3, 4, 10, 40, 46, 53, 54, 67, 83, 101]\ntarget = 40\nresult = binary_search(sorted(arr), target, 0, len(arr) - 1)\nif result != -1:\n    print(result)\nelse:\n    print(\"Element not found\")",
  "difficulty_id": 3,
  "language_id": 3
},
{ 
  "name": "Nested Levels",
  "question": "Create a function that takes in a nested list and an element and returns the frequency of that element by nested level.",
  "answer": "{0: 1, 1: 2, 2: 2}",
  "hint": "Create a dictionary and iterate over each sublist in the nested list. For each sublist use the collections.Counter to count the occurrences of each element. Store the count of the element in the dictionary using the level as the key.",
  "comment": "my_nested_list = [\n    [1, 2, 3],\n    [2, 3, 4, 2],\n    [1, 2, 1, 3, 2, 1]\n]\nelement_to_count = 2",
  "solution": "from collections import Counter\n\ndef element_frequency_by_level(nested_list, element):\n    result = {}\n    for level, sublist in enumerate(nested_list):\n        count = Counter(sublist)\n        result[level] = count[element]\n    return result\nmy_nested_list = [\n    [1, 2, 3],\n    [2, 3, 4, 2],\n    [1, 2, 1, 3, 2, 1]\n]\n\nelement_to_count = 2\nfrequency_by_level = element_frequency_by_level(my_nested_list, element_to_count)\nprint(frequency_by_level)",
  "difficulty_id": 3,
  "language_id": 3
},
{
  "name": "Cocktail Sort",
  "question": "Cocktail sort is a variation of bubble sort that traverses through a given array in both directions alternatively. Each iteration of the algorithm is broken into 2 stages. The first loops through the array from left to right.  During the loop, adjacent items are compared and if value on the left is greater than the value on the right, then values are swapped. At the end of first iteration, largest number will reside at the end of the array. The second stage loops through the array in opposite direction.",
  "answer": "0 1 2 2 4 5 8",
  "hint": "Loop through the array comparing adjacent elements. If the left is greater than the right swap the elements. Continue this process until no swaps occur during a full traversal of the array. Then loop through the array backwards completing the same compare process. If an element is smaller move it to the right.",
  "comment": "#Create a cocktail sort to sort the following array:\na = [5, 1, 4, 2, 8, 0, 2]",
  "solution": "def cocktailSort(a):\n    n = len(a)\n    swapped = True\n    start = 0\n    end = n-1\n    while (swapped==True):\n        swapped = False\n        for i in range (start, end):\n            if (a[i] > a[i+1]) :\n                a[i], a[i+1]= a[i+1], a[i]\n                swapped=True\n        if (swapped==False):\n            break\n        swapped = False\n        end = end-1\n        for i in range(end-1, start-1,-1):\n            if (a[i] > a[i+1]):\n                a[i], a[i+1] = a[i+1], a[i]\n                swapped = True\n        start = start+1\n\na = [5, 1, 4, 2, 8, 0, 2]\ncocktailSort(a)\nfor i in range(len(a)):\n    print (\"%d\" %a[i])",
  "difficulty_id": 3,
  "language_id": 3
},
{ 
  "name": "Bishop Moves",
  "question": "Check is a bishop can reach a certain spot on the board in the given amount of moves. Given a starting square start, ending square end and the maximum number of moves allowed n. Return True if the ending square can be reached from the starting square within the given amount of moves. Keep in mind the chessboard goes from a1 to h8 (8x8).",
  "answer": "True False False",
  "hint": "Write a function to calculate the absolute different in the horizontal and vertical coordinates between the two chess board spaces. Then use conditional statements to determine if the bishop can reach the spot in the amount of moves given.",
  "comment": "print(can_bishop_reach(\"a1\", \"b4\",2))  \nprint(can_bishop_reach(\"a1\", \"b5\",5))  \nprint(can_bishop_reach(\"d1\", \"a7\",1))",
  "solution": "def can_bishop_reach(a, b, n):\n    if n==0:\n      return a==b\n    x,y = abs(ord(a[0])-ord(b[0])), abs(int(a[1])-int(b[1]))\n    if n==1:\n        return x==y \n    return x%2==y%2\n\nprint(can_bishop_reach(\"a1\", \"b4\",2))  \nprint(can_bishop_reach(\"a1\", \"b5\",5)) \nprint(can_bishop_reach(\"d1\", \"a7\",1))",
  "difficulty_id": 3,
  "language_id": 3
},
{
  "name": "Stalactites or Stalagmites",
  "question": "Stalactites hang from the ceiling of a cave while stalagmites grow from the floor. Create a function that determines whether the input represents \"stalactites\" or \"stalagmites\". If it represents both, return \"both\". Input will be a 2D array, with 1 representing a piece of rock, and 0 representing air space.",
  "answer": "stalactites stalagmites both",
  "hint": "You can iterate through a 2D array with nested loop. Check for the presence of formations (stalactites and stalagmites) based on the value in the array using conditional statements.",
  "comment": "public class Main {\n  public static void main(String[] args) {\n      int[][] cave1 = {\n          {1, 1, 1},\n          {0, 0, 0}\n      };\n      System.out.println(identifyFormation(cave1)); \n\n      int[][] cave2 = {\n          {0, 0, 0},\n          {1, 1, 1}\n      };\n      System.out.println(identifyFormation(cave2));\n\n      int[][] cave3 = {\n          {1, 0, 1},\n          {0, 1, 0}\n      };\n      System.out.println(identifyFormation(cave3)); \n  }\n}",
  "solution": "public class Main {\n  public static String identifyFormation(int[][] cave) {\n    boolean hasStalactites = false;\n    boolean hasStalagmites = false;\n\n    for (int i = 0; i < cave.length; i++) {\n    for (int j = 0; j < cave[i].length; j++) {\n     if (cave[i][j] == 1) {\n      if (i == 0) {\n        hasStalactites = true;\n } else if (i == cave.length - 1) {\n        hasStalagmites = true;\n       } else {\n        return \"both\";\n       }\n      }\n     }\n    }\n\n    if (hasStalactites && hasStalagmites) {\n        return \"both\";\n    } else if (hasStalactites) {\n        return \"stalactites\";\n    } else if (hasStalagmites) {\n        return \"stalagmites\";\n    } else {\n        return \"neither stalactites nor stalagmites\";\n    }\n  }\n\n  public static void main(String[] args) {\n      int[][] cave1 = {\n          {1, 1, 1},\n          {0, 0, 0}\n      };\n  \nSystem.out.println(identifyFormation(cave1)); \n\n      int[][] cave2 = {\n          {0, 0, 0},\n          {1, 1, 1}\n      };\n      System.out.println(identifyFormation(cave2));\n\n      int[][] cave3 = {\n          {1, 0, 1},\n          {0, 1, 0}\n      };\n      System.out.println(identifyFormation(cave3)); \n  }\n}",
  "difficulty_id": 3,
  "language_id": 1
},
{
  "name": "Consecutive List",
  "question": " Create a function that determines whether elements in an array can be re-arranged to form a consecutive list of numbers where each number appears exactly once. If the array is consecutive print true if not print false.",
  "answer": "true",
  "hint": "Sort the array first. Iterate through the array using a loop and compare to see if it equal to the previous element plus one.",
  "comment": "// Use this array to test the solution \n int[] arr = {5, 4, 2, 3, 1, 6};",
  "solution": "import java.util.Arrays;\n\npublic class Main {\n  public static boolean areConsecutive(int[] arr) {\n  Arrays.sort(arr);\n  for (int i = 1; i < arr.length; i++) {\n      if (arr[i] != arr[i - 1] + 1) {\n          return false;\n      }\n  }\n  return true;\n  }\n\n  public static void main(String[] args) {\n    int[] arr = {5, 4, 2, 3, 1, 6};\n    if (areConsecutive(arr)) {\n        System.out.println(true);\n    } else {\n        System.out.println(false);\n    }\n  }\n}",
  "difficulty_id": 3,
  "language_id": 1
},
{
  "name": "Can Complete Word",
  "question": "Determine whether an input string can be transformed into a specific word by adding additional letters without changing the order of the existing letters.",
  "answer": "true",
  "hint": "Create a while loop with conditional statements to determine if the target word can be created by adding and not removing any letters or changing the order of the input word.",
  "comment": "public class Main {\n  public static void main(String[] args) {\n    String input = \"technology\"; \n    String targetWord = \"technlgy\"; \n\n    boolean result = canTransformToWord(input, targetWord);\n    System.out.println(result);\n  }\n}",
  "solution": "public class Main {\n  public static boolean canTransformToWord(String input, String targetWord) {\n    int inputIndex = 0;\n    int targetIndex = 0;\n\n    while (inputIndex < input.length() && targetIndex < targetWord.length()) {\n        if (input.charAt(inputIndex) == targetWord.charAt(targetIndex)) {\n            inputIndex++;\n            targetIndex++;\n        } else {\n            inputIndex++;\n        }\n    }\n    return targetIndex == targetWord.length();\n  }\n\n  public static void main(String[] args) {\n    String input = \"technology\"; \n    String targetWord = \"technlgy\"; \n\n    boolean result = canTransformToWord(input, targetWord);\n    System.out.println(result);\n  }\n}",
  "difficulty_id": 3,
  "language_id": 1
},
{
  "name": "Spartan Cipher",
  "question": "A Spartan cipher is transposition cipher where a string is encoded by sliding the characters down a certain number of positions. Create a function that takes two arguments, a number of slides and a string message, and returns the encoded message. The cipher should function as follows: The first letter starts at index[0] and then proceeds to skip to the character of the slideN index. Continue until run out of characters. Then start again from index[1] until looped through the whole list.",
  "answer": "Lipethteesarwcri",
  "hint": "Remove any whitespace from the input message. Create a new string by taking character and sliding them by nSlide positions using a loop.",
  "comment": "public class Main {\n  public static void main(String[] args) {\n    String message = \"Lets write a cipher\";\n    int nSlide = 6;\n\n    String encodedMessage = cipher(message, nSlide);\n    System.out.println(encodedMessage);\n  }\n}",
  "solution": "public class Main {\n  public static String cipher(String message, int nSlide) {\n    String cleanedMessage = message.replaceAll(\"\\\\s\", \"\");\n    StringBuilder result = new StringBuilder();\nfor (int i = 0; i < nSlide; i++) {\n        for (int j = i; j < cleanedMessage.length(); j += nSlide) {\n            result.append(cleanedMessage.charAt(j));\n        }\n    }\n\n    return result.toString();\n  }\npublic static void main(String[] args) {\n    String message = \"Lets write a cipher\";\n    int nSlide = 6;\nString encodedMessage = cipher(message, nSlide);\n    System.out.println(encodedMessage);\n  }\n}",
  "difficulty_id": 3,
  "language_id": 1
},
{ 
  "name": "Universal Age",
  "question": "Given an age in seconds, calculate how old someone would be on a different planet.For Example if you are 1,000,000,000 seconds old, you should be able to say that you are 31.69 Earth-years old. Return the age as a rounded whole number and try the function with the age 34 for planet Jupiter.",
  "answer": "3",
  "hint": "Create an object with all of the ratios for the orbital periods. Then create a function that intakes the current age and the planet and divides the age by the planet ratio. ",
  "comment": "const orbit_ratio = {\n    earth: 1.0,\n    mercury: 0.2408467,\n    venus: 0.61519726,\n    mars: 1.8808158,\n    jupiter: 11.862615,\n    saturn: 29.447498,\n    uranus: 84.016846,\n    neptune: 164.79132};\n  let currentAge= 34\nconsole.log(age(\"jupiter\",currentAge))",
  "solution": "const orbit_ratio = {\n    earth: 1.0,\n    mercury: 0.2408467,\n    venus: 0.61519726,\n    mars: 1.8808158,\n    jupiter: 11.862615,\n    saturn: 29.447498,\n    uranus: 84.016846,\n    neptune: 164.79132};\nexport type Planet = keyof typeof orbit_ratio;\nexport function findAge(forPlanet: Planet, age: number): number {\n  return Math.round(age / orbit_ratio[forPlanet]);\n}\nlet currentAge= 34\nconsole.log(findAge (\"jupiter\",currentAge))",
  "difficulty_id": 1,
  "language_id": 4
},
{
  "name": "Triangle Fit",
  "question": "Create a function that takes the dimensions of two triangles (as arrays) and checks if the first triangle fits into the second one. If it does return true otherwise return false.",
  "answer": "false true false false",
  "hint": "First sort both of the arrays given to the function. Then create a loop to determine if the first triangle is larger than the second.",
  "comment": "console.log(triangleFit([1, 1, 1], [1, 1, 1])); \nconsole.log(triangleFit([1, 1, 1], [2, 2, 2])); \nconsole.log(triangleFit([1, 2, 3], [1, 2, 2])); \nconsole.log(triangleFit([2, 4, 5], [1, 2, 6]));",
  "solution": "function triangleFit(triangle1, triangle2) {\n  const sortedTriangle1 = triangle1.sort((a, b) => a - b);\n  const sortedTriangle2 = triangle2.sort((a, b) => a - b);\n\n  for (let i = 0; i < 3; i++) {\nif (sortedTriangle1[i] >= sortedTriangle2[i]) {\n          return false; \n      }\n  }\n  return true; \n}\nconsole.log(triangleFit([1, 1, 1], [1, 1, 1])); \nconsole.log(triangleFit([1, 1, 1], [2, 2, 2])); \nconsole.log(triangleFit([1, 2, 3], [1, 2, 2])); \nconsole.log(triangleFit([2, 4, 5], [1, 2, 6]));",
  "difficulty_id": 3,
  "language_id": 2
},
{
  "name": "Meal Time",
  "question": "Simon eats his meals at the same time every day. Breakfast at 7am lunch at noon and Dinner at 7pm. Create a function that determine how long from the current time to the next meal and return it in the following format: x hours xx minutes.",
  "answer": "1 hours 30 minutes",
  "hint": "Create an array with objects for the designated meal times. Create a date object using the current time. Iterate through the meal times array. For each meal create a date object using the actual date and the meal time. If meal time is greater than current time break out of the loop and calculate the difference between the two.",
  "comment": "const currentTime = '10:30';",
  "solution": "function timeUntilNextMeal(currentTime) {\n    const mealTimes = [\n        { name: 'Breakfast', time: '07:00' },\n        { name: 'Lunch', time: '12:00' },\n        { name: 'Dinner', time: '19:00' }\n    ];\n\n    const currentTimeObj = new Date(`2000-01-01T${currentTime}`);\n\n    let nextMealTime;\n    for (const meal of mealTimes) {\n        const mealTimeObj = new Date(`2000-01-01T${meal.time}`);\n        if (mealTimeObj > currentTimeObj) {\n            nextMealTime = mealTimeObj;\n            break;\n        }\n    }\n\n    const timeDifference = nextMealTime - currentTimeObj;\n    const hours = Math.floor(timeDifference / 3600000);\n    const minutes = Math.floor((timeDifference % 3600000) / 60000);\n\n    return [hours, minutes];\n}\n\nconst currentTime = '10:30';\nconst timeUntilNext = timeUntilNextMeal(currentTime);\nconsole.log(`${timeUntilNext[0]} hours ${timeUntilNext[1]} minutes`);",
  "difficulty_id": 3,
  "language_id": 2
},
{
  "name": "Knight Moves",
  "question": "Create a function that takes a square where a knight jumps from as a string and returns all the possible squares the knight can land on as a string. Ignore capturing and further Chess rules. Be aware of the sides of the board. Test the function to find all of  the spaces a knight can move from h5.",
  "answer": "g3, g7, f4, f6",
  "hint": "Calculate row and column indices for the given start space. Define an array that specifies moves as pairs of column and row offsets. Use a function to filter out column and row indices that are outside the chessboard. Map the values to return them in the correct chess space notation.",
  "comment": "const knightPosition = 'h5';",
  "solution": "function getKnightMoves(startSquare) {\n    const columns = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n    const rows = [8, 7, 6, 5, 4, 3, 2, 1];\n\n    const [startColumn, startRow] = [columns.indexOf(startSquare[0]), Number(startSquare[1])];\n    const possibleMoves = [\n        [startColumn - 1, startRow - 2],\n        [startColumn - 1, startRow + 2],\n        [startColumn - 2, startRow - 1],\n        [startColumn - 2, startRow + 1],\n        [startColumn + 1, startRow - 2],\n        [startColumn + 1, startRow + 2],\n        [startColumn + 2, startRow - 1],\n        [startColumn + 2, startRow + 1]\n    ];\n\n    const validMoves = possibleMoves.filter(([col, row]) => {\n        return col >= 0 && col < 8 && row >= 1 && row <= 8;\n    });\n\n    const result = validMoves.map(([col, row]) => columns[col] + rows[8 - row]);\n    return result.join(', ');\n}\n\nconst knightPosition = 'h5';\nconst possibleMoves = getKnightMoves(knightPosition);\nconsole.log(`${possibleMoves}`);",
  "difficulty_id": 3,
  "language_id": 2
},
{
  "name": "Sudoku",
  "question": "Write a sudoku validator. This function should return true if the 2-D array represents a valid sudoku and false otherwise. Rules for Sudoku: Each row must have the digits from 1 to 9 exactly once, each column must have the digits from 1 to 9 exactly once, and each 3x3 box must have the digits from 1 to 9 exactly once.",
  "answer": "true",
  "hint": "Row & Column Validation: The function checks each row for uniqueness. It filters out empty cells, creates an array of non-empty digits, and verifies that the number of unique digits equals the total number of digits in the row. Box Validation: The function validates 3x3 boxes within the grid. It calculates the starting row and column for each box based on the index (0 to 8). Within each box, it checks for unique digits. If any box fails, the function returns false.",
  "comment": "//Validate the following Sudoku board\nconst sudokuBoard = [\n    [\"5\", \"3\", \".\", \".\", \"7\", \".\", \".\", \".\", \".\"],\n    [\"6\", \".\", \".\", \"1\", \"9\", \"5\", \".\", \".\", \".\"],\n    [\".\", \"9\", \"8\", \".\", \".\", \".\", \".\", \"6\", \".\"],\n    [\"8\", \".\", \".\", \".\", \"6\", \".\", \".\", \".\", \"3\"],\n    [\"4\", \".\", \".\", \"8\", \".\", \"3\", \".\", \".\", \"1\"],\n    [\"7\", \".\", \".\", \".\", \"2\", \".\", \".\", \".\", \"6\"],\n    [\".\", \"6\", \".\", \".\", \".\", \".\", \"2\", \"8\", \".\"],\n    [\".\", \".\", \".\", \"4\", \"1\", \"9\", \".\", \".\", \"5\"],\n    [\".\", \".\", \".\", \".\", \"8\", \".\", \".\", \"7\", \"9\"]\n];",
  "solution": "function isValidSudoku(board) {\n    for (const row of board) {\n        const digits = row.filter((character) => character !== '.');\n        const isValid = digits.length === new Set(digits).size;\n        if (!isValid) return false;\n    }\n\n    for (let col = 0; col < 9; col++) {\n        const digits = [];\n        for (let row = 0; row < 9; row++) {\n            const character = board[row][col];\n            if (character !== '.') digits.push(character);\n        }\n        const isValid = digits.length === new Set(digits).size;\n        if (!isValid) return false;\n    }\n\n    for (let box = 0; box < 9; box++) {\n        const digits = [];\n        const startRow = Math.floor(box / 3) * 3;\n        const startCol = (box % 3) * 3;\n        for (let row = startRow; row < startRow + 3; row++) {\n            for (let col = startCol; col < startCol + 3; col++) {\n                const character = board[row][col];\n                if (character !== '.') digits.push(character);\n            }\n        }\n        const isValid = digits.length === new Set(digits).size;\n        if (!isValid) return false;\n    }\n\n    return true; \n}\n\nconst sudokuBoard = [\n    [\"5\", \"3\", \".\", \".\", \"7\", \".\", \".\", \".\", \".\"],\n    [\"6\", \".\", \".\", \"1\", \"9\", \"5\", \".\", \".\", \".\"],\n    [\".\", \"9\", \"8\", \".\", \".\", \".\", \".\", \"6\", \".\"],\n    [\"8\", \".\", \".\", \".\", \"6\", \".\", \".\", \".\", \"3\"],\n    [\"4\", \".\", \".\", \"8\", \".\", \"3\", \".\", \".\", \"1\"],\n    [\"7\", \".\", \".\", \".\", \"2\", \".\", \".\", \".\", \"6\"],\n    [\".\", \"6\", \".\", \".\", \".\", \".\", \"2\", \"8\", \".\"],\n    [\".\", \".\", \".\", \"4\", \"1\", \"9\", \".\", \".\", \"5\"],\n    [\".\", \".\", \".\", \".\", \"8\", \".\", \".\", \"7\", \"9\"]\n];\n\nconsole.log(isValidSudoku(sudokuBoard));",
  "difficulty_id": 3,
  "language_id": 2
},
{
  "name": "Jump Search",
  "question": "Write a JavaScript program to find an element in a given sorted array of elements using Jump Search.",
  "answer": "3",
  "hint": " Jump search is a searching algorithm for sorted arrays. Determine the step size m by taking the square root of the length of the array n.  Start at the first element of the array and jump m steps until the value at that position is greater than the target value. Once a value greater than the target is found, perform a linear search starting from the previous step until the target is found or it is clear that the target is not in the array. ",
  "comment": "//Find the index of the target in the array \nconst sortedArray = [1, 3, 5, 7, 9, 11, 13, 15];\nconst target = 7;",
  "solution": "function jumpSearch(arr, x, n) {\n    let step = Math.sqrt(n);\n\n    let prev = 0;\n    while (arr[Math.min(step, n) - 1] < x) {\n        prev = step;\n        step += Math.sqrt(n);\n        if (prev >= n) return -1;\n    }\n    while (arr[prev] < x) {\n        prev++;\n        if (prev === Math.min(step, n)) return -1; \n    }\n    if (arr[prev] === x) return prev;\n    return -1; \n}\n\nconst sortedArray = [1, 3, 5, 7, 9, 11, 13, 15];\nconst target = 7;\nconst result = jumpSearch(sortedArray, target, sortedArray.length);\n\nif (result !== -1) {\n    console.log(result);\n} else {\n    console.log(`Element ${target} not found in the array.`);\n}",
  "difficulty_id": 3,
  "language_id": 2
},
{
  "name": "Find Primes",
  "question": " Your task is to create two different functions. One that checks if a number is prime or not. The second functions finds all prime numbers less than or equal to a given number. A prime number is a number larger than 1 that is only divisible by 1 and itself. Use the number 7 to test the functions.",
  "answer": "true[ 2, 3, 5, 7 ]",
  "hint": "Use conditional statements in order to determine if the given number is prime or not. To find all prime numbers less than or equal to the given number, create a loop and check if the number is a prime with the former function. Return all the prime numbers in an array.",
  "solution": "function isPrime(n: number): boolean {\n  if (n < 2) {\n      return false\n  } else if (n === 2) {\n      return true\n  } else if (n % 2 === 0) {\n      return false\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n      if (n % i === 0) { return false }\n  }\n  return true\n}\nexport function primes(limit: number, start: number = 2): number[] {\n  const possiblePrimes: number[] = []\n  for (let i = start; i <= limit; i++) {\n      possiblePrimes.push(i)\n  }\n  return possiblePrimes.filter(isPrime);\n}\n\nconsole.log(isPrime(7))\nconsole.log(primes(7))",
  "difficulty_id": 2,
  "language_id": 4
},
{
  "name": "List Comparison",
  "question": "Given any two lists A and B, determine if: List A is equal to list B; or List A contains list B (A is a superlist of B); or List A is contained by list B (A is a sublist of B); or None of the above is true, thus lists A and B are unequal. Use the below lists to test your function.",
  "answer": "superlist",
  "hint": "Can check the equality with JSON.stringify. For sublist and superlist, use every to iterate through each element in the list. Check if the index of the item is greater or equal to 1.  Compare to see if it hold true for all elements or not. Use conditional statements to return the list comparison.",
  "comment": "const listA = [1, 2, 3, 4];\nconst listB = [2, 3];",
  "solution": "function compareLists<T>(listA: T[], listB: T[]): 'equal' | 'superlist' | 'sublist' | 'unequal' {\n    const isEqual = JSON.stringify(listA) === JSON.stringify(listB);\n    const isSuperlist = listB.every(itemB => listA.indexOf(itemB) >= 0);\n    const isSublist = listA.every(itemA => listB.indexOf(itemA) >= 0);\n    if (isEqual) {\n        return 'equal';\n    } else if (isSuperlist) {\n        return 'superlist';\n    } else if (isSublist) {\n        return 'sublist';\n    } else {\n        return 'unequal';\n    }\n}\nconst listA = [1, 2, 3, 4];\nconst listB = [2, 3];\nconsole.log(compareLists(listA, listB));",
  "difficulty_id": 2,
  "language_id": 4
},
{
  "name": "Collatz Conjecture",
  "question": "Write a function that performs the Collatz Conjecture and return the number of steps it takes to reach 1.",
  "answer": "10",
  "hint": "The Collatz Conjecture or 3x+1 problem takes any positive integer n. If n is even, divide n by 2 to get n / 2. If n is odd, multiply n by 3 and add 1 to get 3n + 1. Repeat the process indefinitely. The conjecture states that no matter which number you start with, you will always reach 1 eventually.",
  "comment": " const arr = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610];\nconst x = 55; ",
  "solution": "function jumpSearch(arr: number[], x: number): number {\n    const n = arr.length;\n    let step = Math.floor(Math.sqrt(n));\n    let prev = 0;\n\n    while (arr[Math.min(step, n) - 1] < x) {\n        prev = step;\n        step += Math.floor(Math.sqrt(n));\n        if (prev >= n) return -1; \n    }\n\n    while (arr[prev] < x) {\n        prev++;\n        if (prev === Math.min(step, n)) return -1; \n    }\n\n    return arr[prev] === x ? prev : -1; \n}\n\nconst arr = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610];\nconst x = 55;\nconst result = jumpSearch(arr, x);\n\nif (result !== -1) {\n    console.log(`${result}`);\n} else {\n    console.log(`Element ${x} not found in the array.`);\n}",
  "difficulty_id": 2,
  "language_id": 4
},
{
  "name": "Nucleotide Counter",
  "question": "Given a string representing a DNA sequence, count how many of each nucleotide is present. If the string contains characters that aren't A, C, G, or T then it is invalid and you should signal an error.",
  "answer": "{ A: 3, C: 1, G: 1, T: 2 }",
  "hint": "Use looping and conditional statements in order to determine the count for each type of nucleotide.",
  "comment": "//Use the following DNA sequence to test the function \nconst sequence = \"GATTACA\";",
  "solution": "function countNucleotides(dnaSequence: string): Record<string, number> {\n    const nucleotideCounts: Record<string, number> = { 'A': 0, 'C': 0, 'G': 0, 'T': 0 };\n\n    for (let i = 0; i < dnaSequence.length; i++) {\n        const nucleotide = dnaSequence[i];\n        if (nucleotide === 'A') {\n            nucleotideCounts['A']++;\n        } else if (nucleotide === 'C') {\n            nucleotideCounts['C']++;\n        } else if (nucleotide === 'G') {\n            nucleotideCounts['G']++;\n        } else if (nucleotide === 'T') {\n            nucleotideCounts['T']++;\n        } else {\n            throw new Error('Invalid DNA sequence');\n        }\n    }\nreturn nucleotideCounts;\n}\n\ntry {\n    const sequence = \"GATTACA\";\n    const result = countNucleotides(sequence);\n    console.log(result); \n} catch (error) {\n  console.error(error.message); \n}",
  "difficulty_id": 2,
  "language_id": 4
},
{
  "name": "Determine Allergies",
  "question": "Given a person's allergy score, determine whether or not they're allergic to a given item, and their full list of allergies.",
  "answer": "peanuts, chocolate",
  "hint": "Defines an object called allergens with various allergens as keys and their corresponding scores as values. Create an array to store the names of allergens for the person. Iterate through the allergens to determine what combination of values each the persons allergen score.",
   "comment": "//Use the following score to determine which allergens the person has \nconst score = 34;\nconst allergens = {\n        eggs: 1,\n        peanuts: 2,\n        shellfish: 4,\n        strawberries: 8,\n        tomatoes: 16,\n        chocolate: 32,\n        pollen: 64,\n        cats: 128,\n    };",
  "solution": "function determineAllergies(score: number): string[] {\n    const allergens = {\n        eggs: 1,\n        peanuts: 2,\n        shellfish: 4,\n        strawberries: 8,\n        tomatoes: 16,\n        chocolate: 32,\n        pollen: 64,\n        cats: 128,\n    };\n\n    const allergicTo: string[] = [];\n\n    for (const allergen in allergens) {\n        if (score & allergens[allergen]) {\n            allergicTo.push(allergen);\n        }\n    }\n\n    return allergicTo;\n}\n\nconst score = 34;\nconst allergies = determineAllergies(score);\nconsole.log(`${allergies.join(', ')}`);",
  "difficulty_id": 2,
  "language_id": 4
},
{
  "name": "Atbash Cipher",
  "question": "Create an implementation of the Atbash cipher using the word below to test. See hints for explanation of the cipher is you are unfamiliar.",
  "answer": "cipher xrksvi",
  "hint": " The Atbash cipher is a simple substitution cipher that relies on transposing all the letters in the alphabet such that the resulting alphabet is backwards. The first letter is replaced with the last letter, the second with the second-last, and so on. Ciphertext is written out in groups of fixed length, the traditional group size being 5 letters, leaving numbers unchanged, and punctuation is excluded. ",
  "comment": "const plaintext = 'cipher';",
  "solution": "function atbashCipher(input: string): string {\n    const plainAlphabet = 'abcdefghijklmnopqrstuvwxyz';\n    const cipherAlphabet = 'zyxwvutsrqponmlkjihgfedcba';\nreturn input\n        .toLowerCase()\n        .replace(/[a-z]/g, (char) => {\n            const index = plainAlphabet.indexOf(char);\n            return index !== -1 ? cipherAlphabet[index] : char;\n        });\n}\n\nconst plaintext = 'cipher';\nconst ciphertext = atbashCipher(plaintext);\nconsole.log(`${plaintext} ${ciphertext}`);",
  "difficulty_id": 3,
  "language_id": 4
}



























 
] 